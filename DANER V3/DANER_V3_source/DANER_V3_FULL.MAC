
	NOLIST
; PICBASIC PRO(TM) Compiler 3.0.4.1, (c) 1998, 2011 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

AIN?BBB macro Bin, Bout, Bndx
	MOVE?BA	Bndx
        addlw   low (Bout)
        movwf   FSR0L
	movlw	(Bout) >> 8
	clrf	FSR0H
	addwfc	FSR0H, F
        MOVE?BB Bin, INDF0
    endm

AIN?CBB macro Cin, Bout, Bndx
	MOVE?BA	Bndx
        addlw   low (Bout)
        movwf   FSR0L
	movlw	(Bout) >> 8
	clrf	FSR0H
	addwfc	FSR0H, F
        MOVE?CB Cin, INDF0
    endm

ADD?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?BCN macro Bin, Cin, Nout
    if ((Cin) == 1)
	CHK?RP	Bin
	incf	Bin, W
	MOVE?AN	Nout
	rlcf	(Nout) + 1, F
    else
	movlw	low (Cin)
	CHK?RP	Bin
	addwf	Bin, W
	MOVE?AN	Nout
	movlw	high (Cin)
	addwfc	(Nout) + 1, F
	movlw	upper (Cin)
	addwfc	(Nout) + 2, F
	movlw	(Cin) >> 24
	addwfc	(Nout) + 3, F
    endif
    endm

ADD?CBN macro Cin, Bin, Nout
    if ((Cin) == 1)
	CHK?RP	Bin
	incf	Bin, W
	MOVE?AN	Nout
	rlcf	(Nout) + 1, F
    else
	movlw	low (Cin)
	CHK?RP	Bin
	addwf	Bin, W
	MOVE?AN	Nout
	movlw	high (Cin)
	addwfc	(Nout) + 1, F
	movlw	upper (Cin)
	addwfc	(Nout) + 2, F
	movlw	(Cin) >> 24
	addwfc	(Nout) + 3, F
    endif
    endm

ADD?NBW macro Nin, Bin, Wout
	MOVE?BA	Bin
	CHK?RP	Nin
	addwf	Nin, W
	MOVE?AB	Wout
	clrf	WREG
	CHK?RP	Nin
	addwfc	(Nin) + 1, W
	MOVE?AB	(Wout) + 1
    endm

ADD?NNB macro Nin1, Nin2, Bout
	MOVE?BA	Nin1
	CHK?RP	Nin2
	addwf	Nin2, W
	MOVE?AB	Bout
    endm

ADD?NNN macro Nin1, Nin2, Nout
    if ((Nout) == (Nin1))
	MOVE?BA	Nin2
	CHK?RP	Nout
	addwf	Nout, F
	MOVE?BA	(Nin2) + 1
	CHK?RP	Nout
	addwfc	(Nout) + 1, F
	MOVE?BA	(Nin2) + 2
	CHK?RP	Nout
	addwfc	(Nout) + 2, F
	MOVE?BA	(Nin2) + 3
	CHK?RP	Nout
	addwfc	(Nout) + 3, F
    else
      if ((Nout) == (Nin2))
	MOVE?BA	Nin1
	CHK?RP	Nout
	addwf	Nout, F
	MOVE?BA	(Nin1) + 1
	CHK?RP	Nout
	addwfc	(Nout) + 1, F
	MOVE?BA	(Nin1) + 2
	CHK?RP	Nout
	addwfc	(Nout) + 2, F
	MOVE?BA	(Nin1) + 3
	CHK?RP	Nout
	addwfc	(Nout) + 3, F
      else
	MOVE?BA	Nin1
	CHK?RP	Nin2
	addwf	Nin2, W
	MOVE?AB	Nout
	MOVE?BA	(Nin1) + 1
	CHK?RP	Nin2
	addwfc	(Nin2) + 1, W
	MOVE?AB	(Nout) + 1
	MOVE?BA	(Nin1) + 2
	CHK?RP	Nin2
	addwfc	(Nin2) + 2, W
	MOVE?AB	(Nout) + 2
	MOVE?BA	(Nin1) + 3
	CHK?RP	Nin2
	addwfc	(Nin2) + 3, W
	MOVE?AB	(Nout) + 3
      endif
    endif
    endm

ADD?WCW macro Win, Cin, Wout
    if ((Wout) == (Win))
        CHK?RP  Wout
      if ((Cin) == 1)
        incf    Wout, F
      else  
        movlw   low (Cin)
        addwf   Wout, F
      endif
        movlw   (Cin) >> 8
        addwfc  (Wout) + 1, F
    else
        CHK?RP  Win
      if ((Cin) == 1)
        incf    Win, W
      else
        movlw   low (Cin)
        addwf   Win, W
      endif
        MOVE?AB Wout
        movlw   (Cin) >> 8
        CHK?RP  Win
        addwfc  (Win) + 1, W
        MOVE?AB (Wout) + 1
    endif
    endm

DIV?CWW macro Cin, Win, Wout
        MOVE?CN Cin, R0
        MOVE?WN Win, R1
        L?CALL  DIVS
        MOVE?AWW R0, Wout
    endm
DIVS_USED = 1

DIV?NCB macro Nin, Cin, Bout
        MOVE?NN Nin, R0
        MOVE?CN Cin, R1
        L?CALL  DIVS
        MOVE?AB Bout
    endm
DIVS_USED = 1

DIV?NCN macro Nin, Cin, Nout
        MOVE?NN Nin, R0
        MOVE?CN Cin, R1
        L?CALL  DIVS
        MOVE?ANN R0, Nout
    endm
DIVS_USED = 1

DIV?NCW macro Nin, Cin, Wout
        MOVE?NN Nin, R0
        MOVE?CN Cin, R1
        L?CALL  DIVS
        MOVE?AWW R0, Wout
    endm
DIVS_USED = 1

DIV?NNN macro Nin1, Nin2, Nout
        MOVE?NN Nin1, R0
        MOVE?NN Nin2, R1
        L?CALL  DIVS
        MOVE?ANN R0, Nout
    endm
DIVS_USED = 1

MUL?BBN macro Bin1, Bin2, Nout
        MOVE?BA Bin1
        CHK?RP  Bin2
        mulwf   Bin2
        MOVE?WN PRODL, Nout
    endm

MUL?BCN macro Bin, Cin, Nout
    if ((Cin) == 2)
        bcf     STATUS, C
        CHK?RP  Bin
        rlcf    Bin, W
        MOVE?AN Nout
        rlcf    (Nout) + 1, F
    else
        MOVE?BN Bin, R3
        MOVE?CN Cin, R1
        L?CALL  MUL
        MOVE?ANN R2, Nout
    endif
    endm
MUL_USED = 1

MUL?NCN macro Nin, Cin, Nout
        MOVE?NN Nin, R3
        MOVE?CN Cin, R1
        L?CALL  MUL
        MOVE?ANN R2, Nout
    endm
MUL_USED = 1

MUL?WCN macro Win, Cin, Nout
    if ((Cin) == 2)
        bcf     STATUS, C
        CHK?RP  Win
        rlcf    Win, W
        MOVE?AB Nout
        CHK?RP  Win
        rlcf    (Win) + 1, W
        MOVE?AB (Nout) + 1
        clrf	(Nout) + 2
        rlcf    (Nout) + 2, F
        clrf	(Nout) + 3
    else
        MOVE?WN Win, R3
        MOVE?CN Cin, R1
        L?CALL  MUL
        MOVE?ANN R2, Nout
    endif
    endm
MUL_USED = 1

MUL?WWN macro Win1, Win2, Nout
        MOVE?WN Win1, R3
        MOVE?WN Win2, R1
        L?CALL  MUL
        MOVE?ANN R2, Nout
    endm
MUL_USED = 1

SUB?BBN macro Bin1, Bin2, Nout
        MOVE?BA Bin2
        CHK?RP  Bin1
        subwf   Bin1, W
        MOVE?AB Nout
	clrf	WREG
	btfss	STATUS, C
        decf	WREG, W
        MOVE?AB Nout + 1
        MOVE?AB Nout + 2
        MOVE?AB Nout + 3
    endm

SUB?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        decf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bout
        subwf   Bout, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        decf    Bin, W
      else
        movlw   Cin
        CHK?RP  Bin
        subwf   Bin, W
      endif
        MOVE?AB Bout
    endif
    endm

SUB?NNN macro Nin1, Nin2, Nout
        MOVE?BA Nin2
    if ((Nout) == (Nin1))
        CHK?RP  Nout
        subwf   Nout, F
        MOVE?BA (Nin2) + 1
        CHK?RP  Nout
        subwfb	(Nout) + 1, F
        MOVE?BA (Nin2) + 2
        CHK?RP  Nout
        subwfb	(Nout) + 2, F
        MOVE?BA (Nin2) + 3
        CHK?RP  Nout
        subwfb	(Nout) + 3, F
    else
        CHK?RP  Nin1
        subwf   Nin1, W
        MOVE?AB Nout
        MOVE?BA (Nin2) + 1
        CHK?RP  Nin1
        subwfb	(Nin1) + 1, W
        MOVE?AB (Nout) + 1
        MOVE?BA (Nin2) + 2
        CHK?RP  Nin1
        subwfb	(Nin1) + 2, W
        MOVE?AB (Nout) + 2
        MOVE?BA (Nin2) + 3
        CHK?RP  Nin1
        subwfb	(Nin1) + 3, W
        MOVE?AB (Nout) + 3
    endif
    endm

SUB?WWN macro Win1, Win2, Nout
        MOVE?BA Win2
        CHK?RP  Win1
        subwf   Win1, W
        MOVE?AB Nout
        MOVE?BA (Win2) + 1
        CHK?RP  Win1
        subwfb	(Win1) + 1, W
        MOVE?AB (Nout) + 1
	clrf	WREG
	btfss	STATUS, C
        decf	WREG, W
        MOVE?AB (Nout) + 2
        MOVE?AB (Nout) + 3
    endm

AND?BCN macro Bin, Cin, Nout
        movlw   Cin
        CHK?RP  Bin
        andwf   Bin, W
        MOVE?AN Nout
    endm

AND?WCN macro Win, Cin, Nout
        CHK?RP  Win
        movlw   low (Cin)
        andwf   Win, W
        MOVE?AB Nout
        movlw   (Cin) >> 8
        CHK?RP  Win
        andwf   Win + 1, W
        MOVE?AB Nout + 1
        clrf	Nout + 2
        clrf	Nout + 3
    endm

OR?CNB macro Cin, Nin, Bout
        movlw   Cin
        CHK?RP  Nin
        iorwf   Nin, W
        MOVE?AB Bout
    endm

OR?NNW macro Nin1, Nin2, Wout
        MOVE?BA Nin1
        CHK?RP  Nin2
        iorwf   Nin2, W
        MOVE?AB Wout
        MOVE?BA Nin1 + 1
        CHK?RP  Nin2
        iorwf   Nin2 + 1, W
        MOVE?AB Wout + 1
    endm

OR?TTN macro Regin1, Bitin1, Regin2, Bitin2, Nout
        clrf    WREG
        CHK?RP  Regin1
        btfsc   Regin1, Bitin1
        addlw   1
        CHK?RP  Regin2
        btfsc   Regin2, Bitin2
        iorlw   1
        MOVE?AN Nout
    endm

LAND?BBN macro Bin1, Bin2, Nout
        MOVE?BB Bin1, R0
        MOVE?BA Bin2
        L?CALL  LAND
        MOVE?AB Nout
        movwf   Nout + 1
        movwf   Nout + 2
        movwf   Nout + 3
    endm
LAND_USED = 1

LAND?NBN macro Nin, Bin, Nout
        MOVE?BA Nin
        iorwf   Nin + 1, W
        iorwf   Nin + 2, W
        iorwf   Nin + 3, W
        movwf   R0
        MOVE?BA Bin
        L?CALL  LAND
        MOVE?AB Nout
        movwf   Nout + 1
        movwf   Nout + 2
        movwf   Nout + 3
    endm
LAND_USED = 1

LOR?BBN macro Bin1, Bin2, Nout
        MOVE?BB Bin1, R0
        MOVE?BA Bin2
        L?CALL  LOR
        MOVE?AB Nout
        movwf   Nout + 1
        movwf   Nout + 2
        movwf   Nout + 3
    endm
LOR_USED = 1

LOR?NBN macro Nin, Bin, Nout
        MOVE?BA Nin
        iorwf   Nin + 1, W
        iorwf   Nin + 2, W
        iorwf   Nin + 3, W
        movwf   R0
        MOVE?BA Bin
        L?CALL  LOR
        MOVE?AB Nout
        movwf   Nout + 1
        movwf   Nout + 2
        movwf   Nout + 3
    endm
LOR_USED = 1

CMPT?TL macro Regin, Bitin, Label
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    endm

CMPF?NL macro Nin, Label
        CLRWDT?
        MOVE?BA Nin
        iorwf   (Nin) + 1, W
        iorwf   (Nin) + 2, W
        iorwf   (Nin) + 3, W
        BIT?GOTO 1, STATUS, Z, Label
    endm

CMPF?TL macro Regin, Bitin, Label
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
    endm

CMPEQ?BBB macro Bin1, Bin2, Bout
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
	btfss	STATUS, Z
	setf	WREG
	xorlw	0ffh
        MOVE?AB Bout
    endm

CMPEQ?BCB macro Bin, Cin, Bout
    if (((Cin) >= 0) & ((Cin) < 100h))
        MOVE?BA Bin
        sublw   Cin
	btfss	STATUS, Z
	setf	WREG
	xorlw	0ffh
        MOVE?AB Bout
    else
        CHK?RP  Bout
        clrf    Bout
    endif
    endm

CMPEQ?TCB macro Regin, Bitin, Cin, Bout
    if (((Cin) == 0) | ((Cin) == 1))
	clrf	WREG
	CHK?RP	Regin
      if ((Cin) == 0)
	btfss Regin, Bitin
      else
	btfsc Regin, Bitin
      endif
	setf	WREG
        MOVE?AB Bout
    else
        CHK?RP  Bout
        clrf    Bout
    endif
    endm

CMPEQ?WWB macro Win1, Win2, Bout
        MOVE?WW Win1, R0
        MOVE?WWA Win2, R1
        L?CALL  CMPEQW
        MOVE?AB Bout
    endm
CMPEQW_USED = 1

CMPEQ?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 1, STATUS, Z, Label
    endm

CMPEQ?BCL macro Bin, Cin, Label
    if (((Cin) >= 0) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 1, STATUS, Z, Label
    endif
    endm

CMPEQ?TCL macro Regin, Bitin, Cin, Label
    if (((Cin) == 0) | ((Cin) == 1))
        CLRWDT?
        BIT?GOTO Cin, Regin, Bitin, Label
    endif
    endm

CMPEQ?WWL macro Win1, Win2, Label
        MOVE?WW Win1, R0
        MOVE?WWA Win2, R1
        L?CALL  CMPEQW
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPEQW_USED = 1

CMPGE?WWB macro Win1, Win2, Bout
        MOVE?WW Win1, R0
        MOVE?WWA Win2, R1
        L?CALL  CMPGEW
        MOVE?AB Bout
    endm
CMPGEW_USED = 1

CMPGE?BCL macro Bin, Cin, Label
    if ((Cin) <= 0)
        L?GOTO  Label
    else
      if ((Cin) < 100h)
        CLRWDT?
        MOVE?CA Cin
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPGE?TTL macro Regin1, Bitin1, Regin2, Bitin2, Label
        CLRWDT?
        BIT?GOTO 1, Regin1, Bitin1, Label
        BIT?GOTO 0, Regin2, Bitin2, Label
    endm

CMPGE?WBL macro Win, Bin, Label
        MOVE?WW Win, R0
	clrf	R1 + 1
        MOVE?BA Bin
        L?CALL  CMPGEW
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPGEW_USED = 1

CMPGE?WCL macro Win, Cin, Label
    if ((Cin) <= 0)
        L?GOTO  Label
    else
      if ((Cin) < 10000h)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPGEW
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPGEW_USED = 1

CMPGT?BCB macro Bin, Cin, Bout
    if ((Cin) < 0)
        CHK?RP  Bout
        setf    Bout
    else
      if ((Cin) < 0ffh)
        MOVE?BB Bin, R0
        MOVE?CA Cin
        L?CALL  CMPGTB
        MOVE?AB Bout
      else
        CHK?RP  Bout
        clrf    Bout
      endif
    endif
    endm
CMPGTB_USED = 1

CMPGT?BCL macro Bin, Cin, Label
    if ((Cin) < 0)
        L?GOTO  Label
    else
      if ((Cin) < 0ffh)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPLE?WWB macro Win1, Win2, Bout
        MOVE?WW Win1, R0
        MOVE?WWA Win2, R1
        L?CALL  CMPLEW
        MOVE?AB Bout
    endm
CMPLEW_USED = 1

CMPLE?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 1, STATUS, C, Label
    endm

CMPLE?BCL macro Bin, Cin, Label
    if ((Cin) >= 0ffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

CMPLE?WCL macro Win, Cin, Label
    if ((Cin) >= 0ffffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLEW
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLEW_USED = 1

CMPLT?BCB macro Bin, Cin, Bout
    if ((Cin) >= 100h)
        CHK?RP  Bout
        setf	Bout
    else
      if ((Cin) > 0)
        MOVE?BB Bin, R0
        MOVE?CA Cin
        L?CALL  CMPLTB
        MOVE?AB Bout
      else
        CHK?RP  Bout
        clrf	Bout
      endif
    endif
    endm
CMPLTB_USED = 1

CMPLT?BCL macro Bin, Cin, Label
    if ((Cin) >= 100h)
        L?GOTO  Label
    else
      if ((Cin) > 0)
        CLRWDT?
        MOVE?CA Cin
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

CMPLT?WCL macro Win, Cin, Label
    if ((Cin) >= 10000h)
        L?GOTO  Label
    else
      if ((Cin) > 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLTW
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLTW_USED = 1

CMPNE?BCL macro Bin, Cin, Label
    if (((Cin) >= 0) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm

CMPNE?NCL macro Nin, Cin, Label
        MOVE?NN Nin, R0
        MOVE?CB (Cin) >> 24, R1 + 3
        MOVE?CB upper (Cin), R1 + 2
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPNE
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPNE_USED = 1

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if ((Cin) == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if ((Cin) == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

CMPNE?WCL macro Win, Cin, Label
    if (((Cin) >= 0) & ((Cin) < 10000h))
        MOVE?CW	Cin, R0
        MOVE?WWA Win, R1
        L?CALL  CMPNEW
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm
CMPNEW_USED = 1

DIG?BCN macro Bin, Cin, Nout
        MOVE?BN Bin, R0
        movlw   Cin
        L?CALL  DIG
        MOVE?AN Nout
    endm
DIG_USED = 1

SHIFTL?BCN macro Bin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
        CHK?RP  Bin
        rlcf    Bin, W
        MOVE?AN Nout
        rlcf    (Nout) + 1, F
    else
        MOVE?BN Bin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTL_USED = 1

SHIFTL?NCN macro Nin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Nout) == (Nin))
        CHK?RP  Nout
        rlcf    Nout, F
        rlcf    (Nout) + 1, F
        rlcf    (Nout) + 2, F
        rlcf    (Nout) + 3, F
      else
        CHK?RP  Nin
        rlcf    Nin, W
        MOVE?AB Nout
        CHK?RP  Nin
        rlcf    (Nin) + 1, W
        MOVE?AB (Nout) + 1
        CHK?RP  Nin
        rlcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
        CHK?RP  Nin
        rlcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
      endif
    else
        MOVE?NN Nin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTL_USED = 1

SHIFTL?NCW macro Nin, Cin, Wout
    if ((Cin) == 1)
        bcf     STATUS, C
        CHK?RP  Nin
        rlcf    Nin, W
        MOVE?AB Wout
        CHK?RP  Nin
        rlcf    (Nin) + 1, W
        MOVE?AB (Wout) + 1
    else
        MOVE?NW Nin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?AWW R0, Wout
    endif
    endm
SHIFTL_USED = 1

SHIFTR?NCN macro Nin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Nout) == (Nin))
        CHK?RP  Nout
        rrcf    (Nout) + 3, F
        rrcf    (Nout) + 2, F
        rrcf    (Nout) + 1, F
        rrcf    Nout, F
      else
        CHK?RP  Nin
        rrcf    (Nin) + 3, W
        MOVE?AB (Nout) + 3
        CHK?RP  Nin
        rrcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
        CHK?RP  Nin
        rrcf    (Nin) + 1, W
        MOVE?AB (Nout) + 1
        CHK?RP  Nin
        rrcf    Nin, W
        MOVE?AB Nout
      endif
    else
        MOVE?NN Nin, R0
        movlw   Cin
        L?CALL  SHIFTR
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTR_USED = 1

SHIFTR?WCW macro Win, Cin, Wout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Wout) == (Win))
        CHK?RP  Wout
        rrcf    Wout + 1, F
        rrcf    Wout, F
      else
        CHK?RP  Win
        rrcf    (Win) + 1, W
        MOVE?AB (Wout) + 1
        CHK?RP  Win
        rrcf    Win, W
        MOVE?AB Wout
      endif
    else
        MOVE?WN Win, R0
        movlw   Cin
        L?CALL  SHIFTR
        MOVE?AWW R0, Wout
    endif
    endm
SHIFTR_USED = 1

ASM? macro
        RST?RP
    endm

BRANCH?BCL macro Bin, Cin, Label
    local jmptbl
	MOVE?BA	Bin
	movwf	R0
	sublw	(Cin) - 1
	BIT?GOTO 0, STATUS, C, Label
	clrf	PCLATH
	clrf	PCLATU
	rlcf	R0, F
	rlcf	PCLATH, F
	movlw	low (jmptbl)
	addwf	R0, F
	movlw	high (jmptbl)
	addwfc	PCLATH, F
	movlw	upper (jmptbl)
	addwfc	PCLATU, F
	movf	R0, W
	movwf	PCL
jmptbl
    endm

BRGOTO?L macro Label
        bra     Label
    endm

CLEAR? macro
    local loop
      ifdef USE_LFSR
        lfsr    0, RAM_END
      else
	MOVE?CW	RAM_END, FSR0L
      endif
loop    clrf    POSTDEC0
        movf    FSR0L, W
        iorwf   FSR0H, W
        bnz     loop
        clrf    INDF0
    endm
CLEAR_USED = 1

DDISABLE? macro
    endm

END? macro
    local loop
loop    sleep
        bra     loop
    endm

ENDASM? macro
    endm

GOSUB?L macro Label
    local dlabel
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
      ifdef DEBUG_STACK_ADDR
        bcf     STATUS, C
        rlcf    DEBUG_STACK, W
        addlw   DEBUG_STACK_ADDR
        movwf   FSR0L
        clrf    FSR0H
        movlw   low (dlabel)
        movwf   POSTINC0
        movlw   high (dlabel)
        movwf   INDF0
      endif
        incf    DEBUG_STACK, F
    endif
        L?CALL  Label
dlabel
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

I2CCLOCK?T macro Regin, Bitin
        BIT?R2  Regin, Bitin
    endm

I2CDATA?T macro Regin, Bitin
        BIT?R1  Regin, Bitin
    endm

I2CREAD?B macro Bout
        L?CALL  I2CREAD
        MOVE?AB Bout
    endm
I2CREAD_USED = 1

I2CREADS?B macro Bout
        L?CALL  I2CREADS
        MOVE?AB Bout
    endm
I2CREAD_USED = 1

I2CREADS?W macro Wout
        L?CALL  I2CREAD
        MOVE?AB Wout + 1
        L?CALL  I2CREADS
        MOVE?AB Wout
    endm
I2CREAD_USED = 1

I2CWRITE?B macro Bin
        MOVE?BA Bin
        L?CALL  I2CWRITE
    endm
I2CWRITE_USED = 1

I2CWRITE?C macro Cin
    if ((high (Cin)) != 0)
        movlw   (Cin) >> 8
        L?CALL  I2CWRITE
    endif
        MOVE?CA low (Cin)
        L?CALL  I2CWRITE
    endm
I2CWRITE_USED = 1

I2CWRITES?C macro Cin
    if ((high (Cin)) != 0)
        movlw   (Cin) >> 8
        L?CALL  I2CWRITE
    endif
        MOVE?CA low (Cin)
        L?CALL  I2CWRITES
    endm
I2CWRITE_USED = 1

INPUT?T macro Regin, Bitin
        MOVE?CT 1, ((Regin) + 12h), Bitin
    endm

LCDOUT?B macro Bin
        MOVE?BA Bin
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUT?C macro Cin
        movlw   Cin
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUT?W macro Win
        MOVE?WA Win
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUTCOUNT?C macro Cin
        MOVE?CB Cin, R4 + 1
    endm

LCDOUTNUM?B macro Bin
        MOVE?BN Bin, R2
    endm

LCDOUTDEC? macro
        MOVE?CW LCDOUTJ, R8
        L?CALL  SEROUT2DEC
    endm
LCDOUTJ_USED = 1
SEROUT2DEC_USED = 1

LOW?T macro Regin, Bitin
        MOVE?CT 0, Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

NEXT?BCL macro Bin, Cin, Label
    if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, F
    else
        movlw	Cin
        CHK?RP  Bin
        addwf   Bin, F
    endif
    if ((Cin) <= 255)
        BIT?GOTO 0, STATUS, C, Label
    endif
    endm

NEXTM?BCL macro Bin, Cin, Label
    if ((Cin) == 1)
        CHK?RP  Bin
        decf	Bin, F
    else
        movlw	Cin
        CHK?RP  Bin
        subwf   Bin, F
    endif
    if ((Cin) <= 255)
        BIT?GOTO 1, STATUS, C, Label
    endif
    endm

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSEB
    else
      if (((Cin) >> 16) == 0)
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEW
      else
        MOVE?CB (Cin) >> 24, R1 + 3
        MOVE?CB upper (Cin), R1 + 2
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSE
      endif
    endif
    endm
PAUSE_USED = 1

READADDRESS?B macro Bin
    ifdef EEADRH
        MOVE?BW Bin, EEADR
    else
        MOVE?BB Bin, EEADR
    endif
    endm

READADDRESS?C macro Cin
    ifdef EEADRH
        MOVE?CW (Cin) & 0ffffh, EEADR
    else
        MOVE?CB	Cin, EEADR
    endif
    endm

READADDRESS?N macro Nin
    ifdef EEADRH
        MOVE?NW Nin, EEADR
    else
        MOVE?NB Nin, EEADR
    endif
    endm

READ?B macro Bout
        L?CALL  READ
        MOVE?AB Bout
    endm
READ_USED = 1

READ?N macro Nout
        L?CALL  READ
        MOVE?AN Nout
    endm
READ_USED = 1

READ?T macro Regout, Bitout
        L?CALL  READ
        MOVE?AT Regout, Bitout
    endm
READ_USED = 1

READ?W macro Wout
        L?CALL  READ
        MOVE?AW Wout
    endm
READ_USED = 1

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm

TOGGLE?T macro Regin, Bitin
        BIT?FLIP Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

WRITEADDRESS?C macro Cin
    ifdef EEADRH
        MOVE?CW (Cin) & 0ffffh, EEADR
    else
        MOVE?CB low (Cin), EEADR
    endif
    endm

WRITE?B macro Bin
        MOVE?BA Bin
        L?CALL  WRITE
    endm
WRITE_USED = 1

WRITE?C macro Cin
        movlw   Cin
        L?CALL  WRITE
    endm
WRITE_USED = 1


	LIST
