'****************************************************************
'*  Name    : HPWM10.pbp                                        *
'*  Author  : Darrel Taylor                                     *
'*  Date    : 5/5/2007                                          *
'*  Version : 1.1                                               *
'*  Notes   : Based on the HPWM command in PBP                  *
'*          : Modified to use 10-bit DutyCycle                  *
'*          :   With "Glitch-Free" operation of the CCP module  *
'*          : Can use any CCP module CCP1-CCP5                  *
'*          : Channel can be a constant, BYTE or WORD var       *
'*          : Duty and Freq MUST be a WORD sized var            *
'*        ! : You must set the CCP pin to OUTPUT manually       *  
'****************************************************************
'*  With assistance from ... mister_e                           *
'*  additional testing by ... Peu                               *
'****************************************************************

disable debug
asm
  if (R1 - R0 == 4)
  else
    messg You must use PBPL
  endif
;____[ HPWM10: 10-bit HPWM, with up to 5 CCP modules ]_____________

HPWM10 macro  Channel, Duty, Freq   
    if Channel < 6 
      MOVE?CB Channel, _HP_Channel      ; Save channel from constant
    else
      MOVE?BB Channel, _HP_Channel      ; Save channel from BYTE var
    endif
    MOVE?WW   Duty, _HP_Duty
    MOVE?WW   Freq, _HP_Freq
    L?CALL    _HPWM10_UPD    
    endm
endasm
; enable debug

HP_Flags  VAR BYTE
  PS0         VAR HP_Flags.0
  PS1         VAR HP_Flags.1
  PSchanged   VAR HP_Flags.2
  PR2changed  VAR HP_Flags.3
  
HP_Channel   VAR BYTE
HP_Freq      VAR Word
HP_Duty      VAR WORD
HP_Temp      VAR WORD
HP_PR2       VAR BYTE

TMR2IF       VAR PIR1.1
TMR2ON       VAR T2CON.2
T2CKPS1      VAR T2CON.1
T2CKPS0      var T2CON.0

goto OverHPWM10

@PS = ((OSC * 1000000) / 1024)
@PR2const = ((OSC * 1000000) / 4)  ;<----Added
PS  CON EXT                        ;<----Added
PR2const CON EXT
HPWM10_UPD:  
;----- PS = (FOSC / 1024) / freq --------------------
    HP_Temp = PS / HP_Freq
    if HP_Temp >= 4 then
        if PS1 <> 1 then PSchanged = 1 
        PS1 = 1
        if PS0 <> 1 then PSchanged = 1 
        PS0 = 1
    else
        if PS1 <> 0 then PSchanged = 1 
        PS1 = 0
        if HP_Temp > 0 then 
            if PS0 <> 1 then PSchanged = 1 
            PS0 = 1
        else
            if PS0 <> 0 then PSchanged = 1 
            PS0 = 0
        endif
    endif

;----- PR2 = ((FOSC / 4 / PS) / freq) - 1 -----------
'    asm
'       PR2const = ((OSC * 1000000) / 4)    <-------------------changed
'       MOVE?CB low PR2const, R2
'       MOVE?CB low (PR2const >> 8), R2 + 1
'       MOVE?CB low (PR2const >>16), R0 
'       clrf    R0 + 1
'    endasm
    
    HP_Temp =PR2const/HP_Freq 'DIV32 HP_Freq <-------------------changed

    if PS0 then HP_Temp = HP_Temp >> 2  ; /4
    if PS1 then HP_Temp = HP_Temp >> 2  ; /4 or 16
    HP_PR2 = HP_Temp.lowbyte - 1
    if HP_PR2 <> PR2 then PR2changed = 1


;----- CCP = ((PR2 + 1) * 4) */ duty cycle (10 bit result) --------
    HP_Temp = (HP_PR2 + 1) << 2  ; * 4
    'HP_Temp = HP_Temp * HP_Duty                   <-------------------changed
    HP_Duty = (HP_Temp * HP_Duty)/1023 'DIV32 1023 <-------------------changed
    


;-----  Get Current DutyCycle ------------------------------------------------
    Branch HP_Channel,[GetCH_Done,GetCH_1,GetCH_2,GetCH_3,GetCH_4,GetCH_5]

    GetCH_1:
            ASM
              ifdef CCP1CON  
                MOVE?BB  CCPR1L,  _HP_Temp
                MOVE?BB  CCP1CON, _HP_Temp + 1
                goto _GetCH_Done        
              endif  
            endasm
    GetCH_2:  
            ASM
              ifdef CCP2CON  
                MOVE?BB  CCPR2L,  _HP_Temp
                MOVE?BB  CCP2CON, _HP_Temp + 1
                goto _GetCH_Done        
              endif  
            endasm
    GetCH_3:  
            ASM
              ifdef CCP3CON  
                MOVE?BB  CCPR3L,  _HP_Temp
                MOVE?BB  CCP3CON, _HP_Temp + 1
                goto _GetCH_Done        
              endif  
            endasm
    GetCH_4:  
            ASM
              ifdef CCP4CON  
                MOVE?BB  CCPR4L,  _HP_Temp
                MOVE?BB  CCP4CON, _HP_Temp + 1
                goto _GetCH_Done        
              endif  
            endasm
    GetCH_5:  
            ASM
              ifdef CCP5CON  
                MOVE?BB  CCPR5L,  _HP_Temp
                MOVE?BB  CCP5CON, _HP_Temp + 1
              endif  
            endasm

GetCH_Done:
    HP_Temp = (HP_Temp.lowbyte << 2) | ((HP_Temp.highbyte & %110000) >> 4)


;-----  Put DutyCycle into CCP registers -------------------------------------
    if HP_Temp <> HP_Duty then  ; if DutyCycle Changed

        HP_Temp = HP_Duty >> 2        ; for CCP?CON
        HP_Temp.highbyte =  %1100 | ((HP_Duty & %11) << 4)
        
        if TMR2ON then              ; if Timer2 is running
            TMR2IF = 0
            while TMR2IF = 0 : wend ; let current cycle complete
        endif
        
        Branch HP_Channel,[PutCH_Done,PutCH_1,PutCH_2,PutCH_3,PutCH_4,PutCH_5]
    
        PutCH_1:  
                ASM
                  ifdef CCP1CON
                    MOVE?BB  _HP_Temp, CCPR1L
                    MOVE?BB  _HP_Temp + 1, CCP1CON
                    goto _PutCH_Done
                  endif  
                endasm
        PutCH_2:  
                ASM
                  ifdef CCP2CON  
                    MOVE?BB  _HP_Temp, CCPR2L
                    MOVE?BB  _HP_Temp + 1, CCP2CON
                    goto _PutCH_Done
                  endif  
                endasm
        PutCH_3:  
                ASM
                  ifdef CCP3CON  
                    MOVE?BB  _HP_Temp, CCPR3L
                    MOVE?BB  _HP_Temp + 1, CCP3CON
                    goto _PutCH_Done
                  endif  
                endasm
        PutCH_4:  
                ASM
                  ifdef CCP4CON  
                    MOVE?BB  _HP_Temp, CCPR4L
                    MOVE?BB  _HP_Temp + 1, CCP4CON
                    goto _PutCH_Done
                  endif  
                endasm
        PutCH_5:
                ASM
                  ifdef CCP5CON  
                    MOVE?BB  _HP_Temp, CCPR5L
                    MOVE?BB  _HP_Temp + 1, CCP5CON
                  endif  
                endasm
    
    PutCH_Done:
    endif

 
;-----  Put Timer2 values, only when needed ----------------------------------
    if TMR2ON = 0 then TMR2ON = 1     ; Start Timer2 if not already running
    
    if (PSchanged | PR2changed) = 1 then
        TMR2IF = 0
        while !TMR2IF : wend          ; let current cycle complete
    
        if PSchanged then             ; set T2 prescaler
            PSchanged = 0
            T2CKPS0 = PS0
            T2CKPS1 = PS1
        endif
        
        if PR2changed then            ; set PR2
            PR2changed = 0
            PR2 = HP_PR2
        endif
    endif
return
 

OverHPWM10:

