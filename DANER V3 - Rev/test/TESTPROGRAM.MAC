
	NOLIST
; PICBASIC PRO(TM) Compiler 3.0.4.1, (c) 1998, 2011 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

ADD?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?BCN macro Bin, Cin, Nout
    if ((Cin) == 1)
	CHK?RP	Bin
	incf	Bin, W
	MOVE?AN	Nout
	rlcf	(Nout) + 1, F
    else
	movlw	low (Cin)
	CHK?RP	Bin
	addwf	Bin, W
	MOVE?AN	Nout
	movlw	high (Cin)
	addwfc	(Nout) + 1, F
	movlw	upper (Cin)
	addwfc	(Nout) + 2, F
	movlw	(Cin) >> 24
	addwfc	(Nout) + 3, F
    endif
    endm

DIV?CWW macro Cin, Win, Wout
        MOVE?CN Cin, R0
        MOVE?WN Win, R1
        L?CALL  DIVS
        MOVE?AWW R0, Wout
    endm
DIVS_USED = 1

DIV?NCW macro Nin, Cin, Wout
        MOVE?NN Nin, R0
        MOVE?CN Cin, R1
        L?CALL  DIVS
        MOVE?AWW R0, Wout
    endm
DIVS_USED = 1

MUL?WWN macro Win1, Win2, Nout
        MOVE?WN Win1, R3
        MOVE?WN Win2, R1
        L?CALL  MUL
        MOVE?ANN R2, Nout
    endm
MUL_USED = 1

SUB?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        decf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bout
        subwf   Bout, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        decf    Bin, W
      else
        movlw   Cin
        CHK?RP  Bin
        subwf   Bin, W
      endif
        MOVE?AB Bout
    endif
    endm

AND?BCN macro Bin, Cin, Nout
        movlw   Cin
        CHK?RP  Bin
        andwf   Bin, W
        MOVE?AN Nout
    endm

AND?WCN macro Win, Cin, Nout
        CHK?RP  Win
        movlw   low (Cin)
        andwf   Win, W
        MOVE?AB Nout
        movlw   (Cin) >> 8
        CHK?RP  Win
        andwf   Win + 1, W
        MOVE?AB Nout + 1
        clrf	Nout + 2
        clrf	Nout + 3
    endm

OR?CNB macro Cin, Nin, Bout
        movlw   Cin
        CHK?RP  Nin
        iorwf   Nin, W
        MOVE?AB Bout
    endm

OR?NNW macro Nin1, Nin2, Wout
        MOVE?BA Nin1
        CHK?RP  Nin2
        iorwf   Nin2, W
        MOVE?AB Wout
        MOVE?BA Nin1 + 1
        CHK?RP  Nin2
        iorwf   Nin2 + 1, W
        MOVE?AB Wout + 1
    endm

OR?TTN macro Regin1, Bitin1, Regin2, Bitin2, Nout
        clrf    WREG
        CHK?RP  Regin1
        btfsc   Regin1, Bitin1
        addlw   1
        CHK?RP  Regin2
        btfsc   Regin2, Bitin2
        iorlw   1
        MOVE?AN Nout
    endm

CMPT?TL macro Regin, Bitin, Label
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    endm

CMPF?TL macro Regin, Bitin, Label
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
    endm

CMPEQ?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 1, STATUS, Z, Label
    endm

CMPEQ?TCL macro Regin, Bitin, Cin, Label
    if (((Cin) == 0) | ((Cin) == 1))
        CLRWDT?
        BIT?GOTO Cin, Regin, Bitin, Label
    endif
    endm

CMPEQ?WWL macro Win1, Win2, Label
        MOVE?WW Win1, R0
        MOVE?WWA Win2, R1
        L?CALL  CMPEQW
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPEQW_USED = 1

CMPLE?WCL macro Win, Cin, Label
    if ((Cin) >= 0ffffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLEW
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLEW_USED = 1

CMPLT?WCL macro Win, Cin, Label
    if ((Cin) >= 10000h)
        L?GOTO  Label
    else
      if ((Cin) > 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLTW
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLTW_USED = 1

CMPNE?NCL macro Nin, Cin, Label
        MOVE?NN Nin, R0
        MOVE?CB (Cin) >> 24, R1 + 3
        MOVE?CB upper (Cin), R1 + 2
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPNE
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPNE_USED = 1

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if ((Cin) == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if ((Cin) == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

SHIFTL?BCN macro Bin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
        CHK?RP  Bin
        rlcf    Bin, W
        MOVE?AN Nout
        rlcf    (Nout) + 1, F
    else
        MOVE?BN Bin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTL_USED = 1

SHIFTL?NCN macro Nin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Nout) == (Nin))
        CHK?RP  Nout
        rlcf    Nout, F
        rlcf    (Nout) + 1, F
        rlcf    (Nout) + 2, F
        rlcf    (Nout) + 3, F
      else
        CHK?RP  Nin
        rlcf    Nin, W
        MOVE?AB Nout
        CHK?RP  Nin
        rlcf    (Nin) + 1, W
        MOVE?AB (Nout) + 1
        CHK?RP  Nin
        rlcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
        CHK?RP  Nin
        rlcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
      endif
    else
        MOVE?NN Nin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTL_USED = 1

SHIFTL?NCW macro Nin, Cin, Wout
    if ((Cin) == 1)
        bcf     STATUS, C
        CHK?RP  Nin
        rlcf    Nin, W
        MOVE?AB Wout
        CHK?RP  Nin
        rlcf    (Nin) + 1, W
        MOVE?AB (Wout) + 1
    else
        MOVE?NW Nin, R0
        movlw   Cin
        L?CALL  SHIFTL
        MOVE?AWW R0, Wout
    endif
    endm
SHIFTL_USED = 1

SHIFTR?NCN macro Nin, Cin, Nout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Nout) == (Nin))
        CHK?RP  Nout
        rrcf    (Nout) + 3, F
        rrcf    (Nout) + 2, F
        rrcf    (Nout) + 1, F
        rrcf    Nout, F
      else
        CHK?RP  Nin
        rrcf    (Nin) + 3, W
        MOVE?AB (Nout) + 3
        CHK?RP  Nin
        rrcf    (Nin) + 2, W
        MOVE?AB (Nout) + 2
        CHK?RP  Nin
        rrcf    (Nin) + 1, W
        MOVE?AB (Nout) + 1
        CHK?RP  Nin
        rrcf    Nin, W
        MOVE?AB Nout
      endif
    else
        MOVE?NN Nin, R0
        movlw   Cin
        L?CALL  SHIFTR
        MOVE?ANN R0, Nout
    endif
    endm
SHIFTR_USED = 1

SHIFTR?WCW macro Win, Cin, Wout
    if ((Cin) == 1)
        bcf     STATUS, C
      if ((Wout) == (Win))
        CHK?RP  Wout
        rrcf    Wout + 1, F
        rrcf    Wout, F
      else
        CHK?RP  Win
        rrcf    (Win) + 1, W
        MOVE?AB (Wout) + 1
        CHK?RP  Win
        rrcf    Win, W
        MOVE?AB Wout
      endif
    else
        MOVE?WN Win, R0
        movlw   Cin
        L?CALL  SHIFTR
        MOVE?AWW R0, Wout
    endif
    endm
SHIFTR_USED = 1

ASM? macro
        RST?RP
    endm

BRANCH?BCL macro Bin, Cin, Label
    local jmptbl
	MOVE?BA	Bin
	movwf	R0
	sublw	(Cin) - 1
	BIT?GOTO 0, STATUS, C, Label
	clrf	PCLATH
	clrf	PCLATU
	rlcf	R0, F
	rlcf	PCLATH, F
	movlw	low (jmptbl)
	addwf	R0, F
	movlw	high (jmptbl)
	addwfc	PCLATH, F
	movlw	upper (jmptbl)
	addwfc	PCLATU, F
	movf	R0, W
	movwf	PCL
jmptbl
    endm

BRGOTO?L macro Label
        bra     Label
    endm

DDISABLE? macro
    endm

END? macro
    local loop
loop    sleep
        bra     loop
    endm

ENDASM? macro
    endm

GOSUB?L macro Label
    local dlabel
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
      ifdef DEBUG_STACK_ADDR
        bcf     STATUS, C
        rlcf    DEBUG_STACK, W
        addlw   DEBUG_STACK_ADDR
        movwf   FSR0L
        clrf    FSR0H
        movlw   low (dlabel)
        movwf   POSTINC0
        movlw   high (dlabel)
        movwf   INDF0
      endif
        incf    DEBUG_STACK, F
    endif
        L?CALL  Label
dlabel
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

HIGH?T macro Regin, Bitin
        MOVE?CT 1, Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

I2CCLOCK?T macro Regin, Bitin
        BIT?R2  Regin, Bitin
    endm

I2CDATA?T macro Regin, Bitin
        BIT?R1  Regin, Bitin
    endm

I2CREAD?B macro Bout
        L?CALL  I2CREAD
        MOVE?AB Bout
    endm
I2CREAD_USED = 1

I2CREADS?B macro Bout
        L?CALL  I2CREADS
        MOVE?AB Bout
    endm
I2CREAD_USED = 1

I2CWRITE?B macro Bin
        MOVE?BA Bin
        L?CALL  I2CWRITE
    endm
I2CWRITE_USED = 1

I2CWRITE?C macro Cin
    if ((high (Cin)) != 0)
        movlw   (Cin) >> 8
        L?CALL  I2CWRITE
    endif
        MOVE?CA low (Cin)
        L?CALL  I2CWRITE
    endm
I2CWRITE_USED = 1

I2CWRITES?B macro Bin
        MOVE?BA Bin
        L?CALL  I2CWRITES
    endm
I2CWRITE_USED = 1

I2CWRITES?C macro Cin
    if ((high (Cin)) != 0)
        movlw   (Cin) >> 8
        L?CALL  I2CWRITE
    endif
        MOVE?CA low (Cin)
        L?CALL  I2CWRITES
    endm
I2CWRITE_USED = 1

INPUT?T macro Regin, Bitin
        MOVE?CT 1, ((Regin) + 12h), Bitin
    endm

LOW?T macro Regin, Bitin
        MOVE?CT 0, Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

OUTPUT?T macro Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSEB
    else
      if (((Cin) >> 16) == 0)
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEW
      else
        MOVE?CB (Cin) >> 24, R1 + 3
        MOVE?CB upper (Cin), R1 + 2
        MOVE?CB high (Cin), R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSE
      endif
    endif
    endm
PAUSE_USED = 1

PAUSEUS?C macro Cin
    if (((Cin) >> 8) == 0)
        movlw   Cin
        L?CALL  PAUSEUSB
    else
        MOVE?CB (Cin) >> 8, R0 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEUS
    endif
    endm
PAUSEUS_USED = 1

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm

SHIFTCLOCK?T macro Regin, Bitin
        BIT?R2  Regin, Bitin
    endm

SHIFTDATA?T macro Regin, Bitin
        BIT?R1  Regin, Bitin
    endm

SHIFTMODE?C macro Cin
        MOVE?CB Cin, GOP
    endm

SHIFTOUT?WC macro Win, Cin
        MOVE?WN Win, R0
    if ((Cin) == 8)
        L?CALL  SHIFTOUT8
    else
        movlw   Cin
        L?CALL  SHIFTOUT
    endif
    endm
SHIFTOUT_USED = 1


	LIST
